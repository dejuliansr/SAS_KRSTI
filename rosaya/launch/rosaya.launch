<launch>
  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <!-- Choose controller manager: fake, simple, or ros_control -->
  <arg name="moveit_controller_manager" default="simple" />

  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />

  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_rviz" default="true" />

  <!-- If needed, broadcast static tf for robot root -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world Link1" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(dirname)/../../rosaya_moveit/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="moveit_controller_manager" value="$(arg moveit_controller_manager)" />
    <arg name="fake_execution_type" value="$(arg fake_execution_type)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(dirname)/../../rosaya_moveit/launch/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(dirname)/../../rosaya_moveit/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- <include file="$(find dynamixel_workbench_controllers)/launch/dynamixel_controllers.launch"></include> -->

  <!-- Run Robot State Publisher read joint_states from dynamixel and publish joint_states to move_group node -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"> 
    <remap from="joint_states" to="dynamixel_workbench/joint_states"/>
  </node>

  <node pkg="rosaya_controller" type="controller_action_server" name="kanan_controller" output="screen">
    <remap from="follow_joint_trajectory" to="kanan_controller/follow_joint_trajectory"/>
  </node>
  <node pkg="rosaya_controller" type="controller_action_server" name="kiri_controller" output="screen">
    <remap from="follow_joint_trajectory" to="kiri_controller/follow_joint_trajectory"/>
  </node>
  <node pkg="rosaya_controller" type="controller_action_server" name="badan_controller" output="screen">
    <remap from="follow_joint_trajectory" to="badan_controller/follow_joint_trajectory"/>
  </node>

</launch>
